package data

import (
	"encoding/json"

	tfjson "github.com/hashicorp/terraform-json"
)

const awsccMemorydbMultiRegionCluster = `{
  "block": {
    "attributes": {
      "arn": {
        "computed": true,
        "description": "The Amazon Resource Name (ARN) of the multi region cluster.",
        "description_kind": "plain",
        "type": "string"
      },
      "description": {
        "computed": true,
        "description": "Description of the multi region cluster.",
        "description_kind": "plain",
        "type": "string"
      },
      "engine": {
        "computed": true,
        "description": "The engine type used by the multi region cluster.",
        "description_kind": "plain",
        "type": "string"
      },
      "engine_version": {
        "computed": true,
        "description": "The Redis engine version used by the multi region cluster.",
        "description_kind": "plain",
        "type": "string"
      },
      "id": {
        "description": "Uniquely identifies the resource.",
        "description_kind": "plain",
        "required": true,
        "type": "string"
      },
      "multi_region_cluster_name": {
        "computed": true,
        "description": "The name of the Global Datastore, it is generated by MemoryDB adding a prefix to MultiRegionClusterNameSuffix.",
        "description_kind": "plain",
        "type": "string"
      },
      "multi_region_cluster_name_suffix": {
        "computed": true,
        "description": "The name of the Multi Region cluster. This value must be unique as it also serves as the multi region cluster identifier.",
        "description_kind": "plain",
        "type": "string"
      },
      "multi_region_parameter_group_name": {
        "computed": true,
        "description": "The name of the parameter group associated with the multi region cluster.",
        "description_kind": "plain",
        "type": "string"
      },
      "node_type": {
        "computed": true,
        "description": "The compute and memory capacity of the nodes in the multi region cluster.",
        "description_kind": "plain",
        "type": "string"
      },
      "num_shards": {
        "computed": true,
        "description": "The number of shards the multi region cluster will contain.",
        "description_kind": "plain",
        "type": "number"
      },
      "status": {
        "computed": true,
        "description": "The status of the multi region cluster. For example, Available, Updating, Creating.",
        "description_kind": "plain",
        "type": "string"
      },
      "tags": {
        "computed": true,
        "description": "An array of key-value pairs to apply to this multi region cluster.",
        "description_kind": "plain",
        "nested_type": {
          "attributes": {
            "key": {
              "computed": true,
              "description": "The key for the tag. May not be null.",
              "description_kind": "plain",
              "type": "string"
            },
            "value": {
              "computed": true,
              "description": "The tag's value. May be null.",
              "description_kind": "plain",
              "type": "string"
            }
          },
          "nesting_mode": "set"
        }
      },
      "tls_enabled": {
        "computed": true,
        "description": "A flag that enables in-transit encryption when set to true.\n\nYou cannot modify the value of TransitEncryptionEnabled after the cluster is created. To enable in-transit encryption on a cluster you must set TransitEncryptionEnabled to true when you create a cluster.",
        "description_kind": "plain",
        "type": "bool"
      },
      "update_strategy": {
        "computed": true,
        "description": "An enum string value that determines the update strategy for scaling. Possible values are 'COORDINATED' and 'UNCOORDINATED'. Default is 'COORDINATED'.",
        "description_kind": "plain",
        "type": "string"
      }
    },
    "description": "Data Source schema for AWS::MemoryDB::MultiRegionCluster",
    "description_kind": "plain"
  },
  "version": 0
}`

func AwsccMemorydbMultiRegionClusterSchema() *tfjson.Schema {
	var result tfjson.Schema
	_ = json.Unmarshal([]byte(awsccMemorydbMultiRegionCluster), &result)
	return &result
}
